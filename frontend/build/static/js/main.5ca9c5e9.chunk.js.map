{"version":3,"sources":["HighlightableText.tsx","index.tsx"],"names":["withStreamlitConnection","props","args","text","_keywords","keywords","_highlighted","highlighted","useMemo","Set","console","log","useState","setHighlighted","useStyletron","css","useEffect","Streamlit","setFrameHeight","getAnchorSpan","node","offset","nodeType","Node","TEXT_NODE","element","parentElement","tagName","previousSibling","ELEMENT_NODE","onMouseUp","selection","window","getSelection","anchorNode","focusNode","start","anchorOffset","getAttribute","end","focusOffset","start_ix","parseInt","end_ix","ix","new_highlighted","map","h","setComponentValue","empty","word","word_ix","key","data-ix","className","background","color","has","toLowerCase","fontWeight","engine","Styletron","ReactDOM","render","StrictMode","value","theme","LightTheme","document","getElementById"],"mappings":"uOAwFeA,eArEW,SAACC,GAA0B,MAG0BA,EAAMC,KAA3EC,EAH2C,EAG3CA,KAAgBC,EAH2B,EAGrCC,SAAkCC,EAHG,EAGhBC,YAE7BF,EAAWG,mBAAQ,kBAAM,IAAIC,IAAIL,KAAY,CAACA,IACpDM,QAAQC,IAAI,YAAaN,GAN0B,MAObO,mBAASN,GAPI,mBAO5CC,EAP4C,KAO/BM,EAP+B,OAQrCC,cAAPC,EAR4C,oBAWnDC,qBAAU,kBAAMC,IAAUC,mBAAkB,IAI5C,IAAMC,EAAgB,SAACC,EAAYC,GACjC,GAAID,EAAKE,UAAYC,KAAKC,UAAW,CACnC,IAAMC,EAAUL,EAAKM,cACrB,MAAwB,QAAb,OAAPD,QAAO,IAAPA,OAAA,EAAAA,EAASE,SAAyBP,EAAKQ,gBACpCH,EAET,GAAIL,EAAKE,UAAYC,KAAKM,aAAc,CACtC,IAAMJ,EAAWL,EAEjB,GADAV,QAAQC,IAAI,iBAAkBc,GACP,QAAnBA,EAAQE,QAAmB,OAAOF,EAIxC,KAAM,eA4BR,OACE,oCACE,yBAAKK,UA5BS,WAChB,IAAMC,EAAYC,OAAOC,eACzB,GAAIF,GAAaA,EAAUG,YAAcH,EAAUI,UAAW,CAAC,IAAD,IAEtDC,EAAK,UAAGjB,EAAcY,EAAUG,WAAYH,EAAUM,qBAAjD,aAAG,EAA6DC,aAAa,WAClFC,EAAG,UAAGpB,EAAcY,EAAUI,UAAWJ,EAAUS,oBAAhD,aAAG,EAA2DF,aAAa,WACpF,GAAIF,GAASG,EAAK,CAChB,IAAIE,EAAWC,SAASN,GACpBO,EAAUD,SAASH,GACvB,GAAIE,EAAWE,EAAQ,CACrB,IAAMC,EAAKD,EACXA,EAASF,EACTA,EAAWG,EAEb,IAAMC,EAAkBtC,EAAYuC,KAAI,SAACC,EAAGH,GAAJ,OACrCA,GAAMH,GAAYG,GAAMD,GAAWI,EAAIA,KAG1ClC,EAAegC,GACf5B,IAAU+B,kBAAkBH,GAC5Bd,EAAUkB,YAQgB9C,EAAK2C,KAAI,SAACI,EAAMC,GAAP,OACnC,0BAAMC,IAAKD,EAASE,UAASF,EAASG,UAAWvC,EAAI,CACnDwC,WAAYhD,EAAY4C,GAAW,UAAa,GAChDK,MAAOnD,EAASoD,IAAIP,EAAKQ,eAAiB,MAAQ,GAClDC,WAAYtD,EAASoD,IAAIP,EAAKQ,eAAiB,OAAS,YACrDR,EAJL,a,wBCrEFU,EAAS,IAAIC,IAGnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAmBC,MAAOL,GACxB,kBAAC,IAAD,CAAeM,MAAOC,KACpB,kBAAC,EAAD,SAINC,SAASC,eAAe,W","file":"static/js/main.5ca9c5e9.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\"\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\"\nimport { useStyletron } from \"styletron-react\"\n\n/**\n * We can use a Typescript interface to destructure the arguments from Python\n * and validate the types of the input\n */\ninterface PythonArgs {\n  text: string[]\n  keywords: string[]\n  highlighted: boolean[]\n}\n\n/**\n * No more props manipulation in the code.\n * We store props in state and pass value directly to underlying Slider\n * and then back to Streamlit.\n */\nconst HighlightableText = (props: ComponentProps) => {\n  // Destructure using Typescript interface\n  // This ensures typing validation for received props from Python\n  const { text, keywords: _keywords, highlighted: _highlighted }: PythonArgs = props.args\n\n  const keywords = useMemo(() => new Set(_keywords), [_keywords])\n  console.log(\"Keywords:\", keywords)\n  const [highlighted, setHighlighted] = useState(_highlighted)\n  const [css] = useStyletron();\n  \n\n  useEffect(() => Streamlit.setFrameHeight(), [])\n\n  \n\n  const getAnchorSpan = (node: Node, offset: number): HTMLElement|null => {\n    if (node.nodeType == Node.TEXT_NODE) {\n      const element = node.parentElement\n      if (element?.tagName == \"div\") return node.previousSibling as HTMLElement\n      return element\n    }\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      const element = (node as HTMLElement)\n      console.log(\"Got an element\", element)\n      if (element.tagName == \"span\") return element\n      \n    }\n\n    throw \"Not handled\"\n  }\n  const onMouseUp = () => {\n    const selection = window.getSelection()\n    if (selection && selection.anchorNode && selection.focusNode) {\n      // Get the selection\n      const start = getAnchorSpan(selection.anchorNode, selection.anchorOffset)?.getAttribute(\"data-ix\")\n      const end = getAnchorSpan(selection.focusNode, selection.focusOffset)?.getAttribute(\"data-ix\")\n      if (start && end) {\n        let start_ix = parseInt(start)\n        let end_ix =  parseInt(end)\n        if (start_ix > end_ix) {\n          const ix = end_ix\n          end_ix = start_ix\n          start_ix = ix\n        }\n        const new_highlighted = highlighted.map((h, ix) => \n          (ix >= start_ix && ix <= end_ix) ? !h : h\n        )\n\n        setHighlighted(new_highlighted)\n        Streamlit.setComponentValue(new_highlighted)\n        selection.empty()\n      }\n    }\n  }\n\n\n  return (\n    <>\n      <div onMouseUp={onMouseUp}>{text.map((word, word_ix) => \n        <span key={word_ix} data-ix={word_ix} className={css({\n          background: highlighted[word_ix] ? \"#ffffbf\" :  \"\",\n          color: keywords.has(word.toLowerCase()) ? \"red\" : \"\",\n          fontWeight: keywords.has(word.toLowerCase()) ? \"bold\" : \"normal\"\n        })}>{word} </span>\n      )}</div>\n    </>\n  )\n}\n\nexport default withStreamlitConnection(HighlightableText)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport HighlightableText from \"./HighlightableText\"\n\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport { ThemeProvider, LightTheme } from \"baseui\"\n\nconst engine = new Styletron()\n\n// Wrap your HighlightableText with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={LightTheme}>\n        <HighlightableText />\n      </ThemeProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}